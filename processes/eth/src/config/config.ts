import AwsSecretManagerConfig from "../helpers/awsSecrets.config";
const name = 'novatide';
export const config = {
  // API_URL: AwsSecretManagerConfig.config.API_URL,
  // NETWORK: AwsSecretManagerConfig.config.NETWORK,
  DB_USER: AwsSecretManagerConfig.config.DB_USER,
  DB_HOST_READ: AwsSecretManagerConfig.config.DB_HOST_READ,
  DB_HOST_WRITE: AwsSecretManagerConfig.config.DB_HOST_WRITE,
  DB_NAME: AwsSecretManagerConfig.config.DB_NAME,
  DB_PASSWORD: AwsSecretManagerConfig.config.DB_PASSWORD,
  DB_PORT: AwsSecretManagerConfig.config.DB_PORT,
  DEPOSIT_WITHDRAW_PROCESS_ETH: AwsSecretManagerConfig.config.DEPOSIT_WITHDRAW_PROCESS_ETH,
  ETH_WALLET_ADDRESS: `${name}_${AwsSecretManagerConfig.config.SERVER}_${AwsSecretManagerConfig.config.ETH_WALLET_ADDRESS}`,
  // WITHDRAW_QUEUE_BLOCKS_PROCESS: AwsSecretManagerConfig.config.WITHDRAW_QUEUE_BLOCKS_PROCESS,
  PENDING_WITHDRAWAL_TX_PROCESS_ETH: AwsSecretManagerConfig.config.PENDING_WITHDRAWAL_TX_PROCESS_ETH,
  RABBIT_MQ: AwsSecretManagerConfig.config.RABBIT_MQ_CONN,
  REDIS_CONN: AwsSecretManagerConfig.config.REDIS_CONN,
  REDIS_HOST_WRITE: AwsSecretManagerConfig.config.REDIS_HOST_WRITE,
  REDIS_HOST_READ: AwsSecretManagerConfig.config.REDIS_HOST_READ,
  REDIS_PORT: AwsSecretManagerConfig.config.REDIS_PORT,
  MIN_BLOCK_CONFORMATIONS: AwsSecretManagerConfig.config.MIN_BLOCK_CONFORMATIONS,
  TOKEN_TYPE_ETH: `${name}_${AwsSecretManagerConfig.config.SERVER}_${AwsSecretManagerConfig.config.TOKEN_TYPE_ETH}`,
  TOKEN_TYPE721_ETH: `${name}_${AwsSecretManagerConfig.config.SERVER}_${AwsSecretManagerConfig.config.TOKEN_TYPE721_ETH}`,
  COIN_FAMILY_ETH: AwsSecretManagerConfig.config.COIN_FAMILY_ETH,
  // added new
  KEYS: {
    FCM_PUSH: AwsSecretManagerConfig.config.FCM_PUSH
  },
  PUSH_NOTIFICATION_QUEUE: AwsSecretManagerConfig.config.PUSH_NOTIFICATION_QUEUE,
  REDISKEYS: {
    ETH_BLOCKS: `${name}_${AwsSecretManagerConfig.config.SERVER}_${AwsSecretManagerConfig.config.ETH_BLOCKS} `,
    OLD_BLOCK_ETH: AwsSecretManagerConfig.config.OLD_BLOCK_ETH,
    NEW_BLOCK_ETH: AwsSecretManagerConfig.config.NEW_BLOCK_ETH,
    ALL_PROCESSES: AwsSecretManagerConfig.config.ALL_PROCESSES,
    ETH_ERROR_LOGS: AwsSecretManagerConfig.config.ETH_ERROR_LOGS,
    NODE_ALERT_ETH: AwsSecretManagerConfig.config.NODE_ALERT_ETH,
    SPECIFIC_BLOCK_ETH: AwsSecretManagerConfig.config.SPECIFIC_BLOCK_ETH
  },

  /**
   * ERC 20 Tokens standard ABI
   */
  TRANSACTIONS: {
    eth_behined_transactions: AwsSecretManagerConfig.config.eth_behined_transactions,
    eth_all_blocks: AwsSecretManagerConfig.config.eth_all_blocks,
    eth_transaction_consumer_count: AwsSecretManagerConfig.config.eth_transaction_consumer_count
  },
  MAILGUN: {
    MAILGUN_API_KEY: AwsSecretManagerConfig.config.MAILGUN_API_KEY,
    MAILGUN_DOMAIN: AwsSecretManagerConfig.config.MAILGUN_DOMAIN,
    MAILGUN_BASE_URL: AwsSecretManagerConfig.config.MAILGUN_BASE_URL,
    FROM_GMAIL: AwsSecretManagerConfig.config.FROM_GMAIL
  },
  NODE: {
    BNB_RPC_URL: AwsSecretManagerConfig.config.BNB_RPC_URL,
    ETH_RPC_URL: AwsSecretManagerConfig.config.ETH_RPC_URL,
    BTC_RPC_URL: AwsSecretManagerConfig.config.BTC_RPC_URL,
    BTC_API_KEY: AwsSecretManagerConfig.config.BTC_API_KEY,
    TRX_RPC_URL: AwsSecretManagerConfig.config.TRX_RPC_URL,
    TRX_API_KEY: AwsSecretManagerConfig.config.TRX_API_KEY
  },
  NODE_ISSUE_ALERT_EMAIL: AwsSecretManagerConfig.config.NODE_ISSUE_ALERT_EMAIL,
  READ_BEHINED_BLOCK_ETH: `${name}_${AwsSecretManagerConfig.config.SERVER}_${AwsSecretManagerConfig.config.READ_BEHINED_BLOCK_ETH}`,
  BLOCKS: AwsSecretManagerConfig.config.BLOCKS,
  BACKEND_WALLET_ADDRESSES: AwsSecretManagerConfig.config.BACKEND_WALLET_ADDRESSES,

  CONTRACT_ABI: [
    {
      constant: true,
      inputs: [],
      name: "name",
      outputs: [{ name: "", type: "string" }],
      payable: false,
      stateMutability: "view",
      type: "function",
    },
    {
      constant: false,
      inputs: [],
      name: "stop",
      outputs: [],
      payable: false,
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      constant: false,
      inputs: [
        { name: "_spender", type: "address" },
        { name: "_value", type: "uint256" },
      ],
      name: "approve",
      outputs: [{ name: "", type: "bool" }],
      payable: false,
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      constant: true,
      inputs: [],
      name: "totalSupply",
      outputs: [{ name: "", type: "uint256" }],
      payable: false,
      stateMutability: "view",
      type: "function",
    },
    {
      constant: false,
      inputs: [
        { name: "_from", type: "address" },
        { name: "_to", type: "address" },
        { name: "_value", type: "uint256" },
      ],
      name: "transferFrom",
      outputs: [{ name: "", type: "bool" }],
      payable: false,
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      constant: true,
      inputs: [],
      name: "INITIAL_SUPPLY",
      outputs: [{ name: "", type: "uint256" }],
      payable: false,
      stateMutability: "view",
      type: "function",
    },
    {
      constant: true,
      inputs: [],
      name: "decimals",
      outputs: [{ name: "", type: "uint8" }],
      payable: false,
      stateMutability: "view",
      type: "function",
    },
    {
      constant: false,
      inputs: [
        { name: "to", type: "address" },
        { name: "value", type: "uint256" },
      ],
      name: "mint",
      outputs: [{ name: "", type: "bool" }],
      payable: false,
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      constant: false,
      inputs: [{ name: "_value", type: "uint256" }],
      name: "burn",
      outputs: [],
      payable: false,
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      constant: false,
      inputs: [
        { name: "_spender", type: "address" },
        { name: "_subtractedValue", type: "uint256" },
      ],
      name: "decreaseApproval",
      outputs: [{ name: "", type: "bool" }],
      payable: false,
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      constant: true,
      inputs: [],
      name: "decimalFactor",
      outputs: [{ name: "", type: "uint256" }],
      payable: false,
      stateMutability: "view",
      type: "function",
    },
    {
      constant: true,
      inputs: [{ name: "_owner", type: "address" }],
      name: "balanceOf",
      outputs: [{ name: "balance", type: "uint256" }],
      payable: false,
      stateMutability: "view",
      type: "function",
    },
    {
      constant: true,
      inputs: [],
      name: "stopped",
      outputs: [{ name: "", type: "bool" }],
      payable: false,
      stateMutability: "view",
      type: "function",
    },
    {
      constant: true,
      inputs: [],
      name: "owner",
      outputs: [{ name: "", type: "address" }],
      payable: false,
      stateMutability: "view",
      type: "function",
    },
    {
      constant: true,
      inputs: [],
      name: "symbol",
      outputs: [{ name: "", type: "string" }],
      payable: false,
      stateMutability: "view",
      type: "function",
    },
    {
      constant: false,
      inputs: [
        { name: "_to", type: "address" },
        { name: "_value", type: "uint256" },
      ],
      name: "transfer",
      outputs: [{ name: "", type: "bool" }],
      payable: false,
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      constant: false,
      inputs: [],
      name: "start",
      outputs: [],
      payable: false,
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      constant: false,
      inputs: [
        { name: "_spender", type: "address" },
        { name: "_addedValue", type: "uint256" },
      ],
      name: "increaseApproval",
      outputs: [{ name: "", type: "bool" }],
      payable: false,
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      constant: true,
      inputs: [
        { name: "_owner", type: "address" },
        { name: "_spender", type: "address" },
      ],
      name: "allowance",
      outputs: [{ name: "", type: "uint256" }],
      payable: false,
      stateMutability: "view",
      type: "function",
    },
    {
      constant: false,
      inputs: [{ name: "newOwner", type: "address" }],
      name: "transferOwnership",
      outputs: [],
      payable: false,
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [{ name: "ownerAdrs", type: "address" }],
      payable: false,
      stateMutability: "nonpayable",
      type: "constructor",
    },
    {
      anonymous: false,
      inputs: [
        { indexed: true, name: "burner", type: "address" },
        { indexed: false, name: "value", type: "uint256" },
      ],
      name: "Burn",
      type: "event",
    },
    {
      anonymous: false,
      inputs: [
        { indexed: true, name: "previousOwner", type: "address" },
        { indexed: true, name: "newOwner", type: "address" },
      ],
      name: "OwnershipTransferred",
      type: "event",
    },
    {
      anonymous: false,
      inputs: [
        { indexed: true, name: "owner", type: "address" },
        { indexed: true, name: "spender", type: "address" },
        { indexed: false, name: "value", type: "uint256" },
      ],
      name: "Approval",
      type: "event",
    },
    {
      anonymous: false,
      inputs: [
        { indexed: true, name: "from", type: "address" },
        { indexed: true, name: "to", type: "address" },
        { indexed: false, name: "value", type: "uint256" },
      ],
      name: "Transfer",
      type: "event",
    },
  ],
  ERC721ABI: [
    {
      anonymous: false,
      inputs: [
        {
          indexed: true,
          internalType: "address",
          name: "owner",
          type: "address",
        },
        {
          indexed: true,
          internalType: "address",
          name: "approved",
          type: "address",
        },
        {
          indexed: true,
          internalType: "uint256",
          name: "tokenId",
          type: "uint256",
        },
      ],
      name: "Approval",
      type: "event",
    },
    {
      anonymous: false,
      inputs: [
        {
          indexed: true,
          internalType: "address",
          name: "owner",
          type: "address",
        },
        {
          indexed: true,
          internalType: "address",
          name: "operator",
          type: "address",
        },
        { indexed: false, internalType: "bool", name: "approved", type: "bool" },
      ],
      name: "ApprovalForAll",
      type: "event",
    },
    {
      anonymous: false,
      inputs: [
        { indexed: true, internalType: "address", name: "from", type: "address" },
        { indexed: true, internalType: "address", name: "to", type: "address" },
        {
          indexed: true,
          internalType: "uint256",
          name: "tokenId",
          type: "uint256",
        },
      ],
      name: "Transfer",
      type: "event",
    },
    {
      inputs: [
        { internalType: "address", name: "to", type: "address" },
        { internalType: "uint256", name: "tokenId", type: "uint256" },
      ],
      name: "approve",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [
        { internalType: "address", name: "player", type: "address" },
        { internalType: "string", name: "tokenURI", type: "string" },
      ],
      name: "awardItem",
      outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [
        { internalType: "address", name: "from", type: "address" },
        { internalType: "address", name: "to", type: "address" },
        { internalType: "uint256", name: "tokenId", type: "uint256" },
      ],
      name: "safeTransferFrom",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [
        { internalType: "address", name: "from", type: "address" },
        { internalType: "address", name: "to", type: "address" },
        { internalType: "uint256", name: "tokenId", type: "uint256" },
        { internalType: "bytes", name: "_data", type: "bytes" },
      ],
      name: "safeTransferFrom",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [
        { internalType: "address", name: "operator", type: "address" },
        { internalType: "bool", name: "approved", type: "bool" },
      ],
      name: "setApprovalForAll",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    {
      inputs: [
        { internalType: "address", name: "from", type: "address" },
        { internalType: "address", name: "to", type: "address" },
        { internalType: "uint256", name: "tokenId", type: "uint256" },
      ],
      name: "transferFrom",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function",
    },
    { inputs: [], stateMutability: "nonpayable", type: "constructor" },
    {
      inputs: [{ internalType: "address", name: "owner", type: "address" }],
      name: "balanceOf",
      outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }],
      name: "getApproved",
      outputs: [{ internalType: "address", name: "", type: "address" }],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [
        { internalType: "address", name: "owner", type: "address" },
        { internalType: "address", name: "operator", type: "address" },
      ],
      name: "isApprovedForAll",
      outputs: [{ internalType: "bool", name: "", type: "bool" }],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [],
      name: "name",
      outputs: [{ internalType: "string", name: "", type: "string" }],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }],
      name: "ownerOf",
      outputs: [{ internalType: "address", name: "", type: "address" }],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [{ internalType: "bytes4", name: "interfaceId", type: "bytes4" }],
      name: "supportsInterface",
      outputs: [{ internalType: "bool", name: "", type: "bool" }],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [],
      name: "symbol",
      outputs: [{ internalType: "string", name: "", type: "string" }],
      stateMutability: "view",
      type: "function",
    },
    {
      inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }],
      name: "tokenURI",
      outputs: [{ internalType: "string", name: "", type: "string" }],
      stateMutability: "view",
      type: "function",
    },
  ]
}